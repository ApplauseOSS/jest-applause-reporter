{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Reporter, TestCaseResult } from '@jest/reporters';\nimport { Test } from '@jest/test-result';\nimport { Circus } from '@jest/types';\nimport { Config } from 'jest';\nimport {\n  ApplauseConfig,\n  ApplauseReporter,\n  TestResultStatus,\n  loadConfig,\n} from 'applause-reporter-common';\n\nexport default class ApplauseJestReporter implements Reporter {\n  private reporter: ApplauseReporter;\n\n  constructor(\n    public globalConfig: Config,\n    options: Partial<ApplauseConfig>\n  ) {\n    const config = loadConfig({\n      properties: options,\n    });\n    this.reporter = new ApplauseReporter(config);\n  }\n\n  onRunStart(): void {\n    void this.reporter.runnerStart();\n  }\n\n  async onRunComplete(): Promise<void> {\n    await this.reporter.runnerEnd();\n  }\n\n  onTestCaseStart(\n    _test: Test,\n    _testCaseStartInfo: Circus.TestCaseStartInfo\n  ): void {\n    void this.reporter.startTestCase(\n      _testCaseStartInfo.fullName,\n      _testCaseStartInfo.title,\n      {\n        providerSessionIds: globalThis.driverRegistry.getSessionIdsForTestCase(\n          _testCaseStartInfo.fullName\n        ),\n      }\n    );\n  }\n\ncleanErrorMessage(str?: string): string | undefined {\n    // eslint-disable-next-line no-control-regex\n    return str?.replace(/\\x1B\\[[0-9;]*m/g, '');\n}\n  onTestCaseResult(_test: Test, _testCaseResult: TestCaseResult): void {\n    \n    // 1. Map over the failure messages and clean each one.\n    const cleanedMessages = _testCaseResult.failureMessages.map(msg => this.cleanErrorMessage(msg) || '');\n\n    // 2. Join the cleaned messages with a newline for better readability.\n    const failureReason = cleanedMessages.join('\\n');\n\n    void this.reporter.submitTestCaseResult(\n      _testCaseResult.fullName,\n      this.mapStatus(_testCaseResult),\n      {\n        // 3. Use the fully cleaned and formatted string.\n        failureReason: failureReason,\n        providerSessionGuids:\n          globalThis.driverRegistry.getSessionIdsForTestCase(\n            _testCaseResult.fullName\n          ),\n      }\n    );\n  }\n\n  private mapStatus(result: TestCaseResult): TestResultStatus {\n    switch (result.status) {\n      case 'passed':\n        return TestResultStatus.PASSED;\n      case 'disabled':\n        return TestResultStatus.SKIPPED;\n      case 'failed':\n        return TestResultStatus.FAILED;\n      case 'skipped':\n        return TestResultStatus.SKIPPED;\n      default:\n        throw new Error(\n          'yo, you shouldnt use this for tests that arent in a status auto-api doesnt support'\n        );\n    }\n  }\n}\n"],"names":["globalConfig","reporter","constructor","options","this","config","loadConfig","properties","ApplauseReporter","onRunStart","runnerStart","onRunComplete","runnerEnd","onTestCaseStart","_test","_testCaseStartInfo","startTestCase","fullName","title","providerSessionIds","globalThis","driverRegistry","getSessionIdsForTestCase","cleanErrorMessage","str","replace","onTestCaseResult","_testCaseResult","failureReason","failureMessages","map","msg","join","submitTestCaseResult","mapStatus","providerSessionGuids","result","status","TestResultStatus","PASSED","SKIPPED","FAILED","Error"],"mappings":"0VAWc,MAIHA,aAHDC,SAER,WAAAC,CACSF,EACPG,GADOC,KAAYJ,aAAZA,EAGP,MAAMK,EAASC,EAAAA,WAAW,CACxBC,WAAYJ,IAEdC,KAAKH,SAAW,IAAIO,EAAgBA,iBAACH,EACtC,CAED,UAAAI,GACOL,KAAKH,SAASS,aACpB,CAED,mBAAMC,SACEP,KAAKH,SAASW,WACrB,CAED,eAAAC,CACEC,EACAC,GAEKX,KAAKH,SAASe,cACjBD,EAAmBE,SACnBF,EAAmBG,MACnB,CACEC,mBAAoBC,WAAWC,eAAeC,yBAC5CP,EAAmBE,WAI1B,CAEH,iBAAAM,CAAkBC,GAEd,OAAOA,GAAKC,QAAQ,kBAAmB,GAC1C,CACC,gBAAAC,CAAiBZ,EAAaa,GAG5B,MAGMC,EAHkBD,EAAgBE,gBAAgBC,KAAIC,GAAO3B,KAAKmB,kBAAkBQ,IAAQ,KAG5DC,KAAK,MAEtC5B,KAAKH,SAASgC,qBACjBN,EAAgBV,SAChBb,KAAK8B,UAAUP,GACf,CAEEC,cAAeA,EACfO,qBACEf,WAAWC,eAAeC,yBACxBK,EAAgBV,WAIzB,CAEO,SAAAiB,CAAUE,GAChB,OAAQA,EAAOC,QACb,IAAK,SACH,OAAOC,EAAAA,iBAAiBC,OAC1B,IAAK,WAIL,IAAK,UACH,OAAOD,EAAAA,iBAAiBE,QAH1B,IAAK,SACH,OAAOF,EAAAA,iBAAiBG,OAG1B,QACE,MAAM,IAAIC,MACR,sFAGP"}
{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Reporter, TestCaseResult } from '@jest/reporters';\nimport { Test } from '@jest/test-result';\nimport { Circus } from '@jest/types';\nimport { Config } from 'jest';\nimport { ApplauseOptions } from './applause-options';\nimport {\n  AutoApi,\n  TestResultStatus,\n  TestRunHeartbeatService,\n} from 'auto-api-client-js';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\nexport default class ApplauseReporter implements Reporter {\n  private readonly TEST_RAIL_CASE_ID_PREFIX: string = 'TestRail-';\n  private readonly APPLAUSE_CASE_ID_PREFIX: string = 'Applause-';\n\n  private autoapi: AutoApi;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private heartbeat?: TestRunHeartbeatService;\n  private heartbeatStarted?: Promise<void>;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n  private uidSubmissionMap: Record<string, Promise<void>> = {};\n\n  constructor(public globalConfig: Config, options: ApplauseOptions) {\n    this.autoapi = new AutoApi({\n      clientConfig: { apiKey: options.apiKey, baseUrl: options.baseUrl },\n      productId: options.productId,\n      testRailOptions: options.testRail,\n    });\n  }\n\n  onRunStart(): void {\n    void this.runnerStart([]);\n  }\n\n  onRunComplete(): void {\n    void this.runnerEnd();\n  }\n\n  onTestCaseStart(\n    _test: Test,\n    _testCaseStartInfo: Circus.TestCaseStartInfo\n  ): void {\n    void this.startTestResult(\n      _testCaseStartInfo.fullName,\n      _testCaseStartInfo.fullName\n    );\n  }\n\n  onTestCaseResult(_test: Test, _testCaseResult: TestCaseResult): void {\n    console.log('Test Case Result');\n    void this.submitTestResult(\n      _testCaseResult.fullName,\n      this.mapStatus(_testCaseResult)\n    );\n  }\n\n  private runnerStart(tests: string[]): void {\n    this.testRunId = this.autoapi\n      .startTestRun({\n        tests,\n      })\n      .then(response => {\n        const runId = response.data.runId;\n        console.log('Test Run %d initialized', runId);\n        this.heartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n        this.heartbeatStarted = this.heartbeat.start();\n        return runId;\n      });\n  }\n\n  private startTestResult(id: string, testCaseName: string): void {\n    const parsedTestCase = this.parseTestCaseName(testCaseName);\n    this.uidToResultIdMap[id] = this.testRunId\n      ?.then(runId =>\n        this.autoapi.startTestCase({\n          testCaseName: parsedTestCase.testCaseName,\n          testCaseId: parsedTestCase.testRailTestCaseId,\n          testRunId: runId,\n          providerSessionIds: [],\n        })\n      )\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  private submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): void {\n    this.uidSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId =>\n      this.autoapi.submitTestResult({\n        status: status,\n        testResultId: resultId,\n        failureReason: errorMessage,\n      })\n    );\n  }\n\n  private async runnerEnd(): Promise<void> {\n    // Wait for the test run to be created and the heartbeat to be started\n    await this.testRunId;\n    await this.heartbeatStarted;\n    // End the heartbeat\n    await this.heartbeat?.end();\n    let resultIds: number[] = [];\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n\n    // Wait for all results to be created\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resultPromises: Promise<void>[] = Object.values(\n      this.uidSubmissionMap\n    );\n\n    // Wait for the results to be submitted\n    void (await Promise.all(resultPromises));\n\n    // Finally, end the test run\n    await this.autoapi.endTestRun((await this.testRunId) || 0);\n\n    // Fetch the provider session asset links\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n\n  private parseTestCaseName(testCaseName: string): ParsedTestCaseName {\n    // Split the name on spaces. We will reassemble after parsing out the other ids\n    const tokens = testCaseName.split(' ');\n    let testRailTestCaseId: string | undefined;\n    let applauseTestCaseId: string | undefined;\n    tokens.forEach(token => {\n      if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n        if (testRailTestCaseId !== undefined) {\n          console.warn('Multiple TestRail case ids detected in testCase name');\n        }\n        testRailTestCaseId = token.substring(\n          this.TEST_RAIL_CASE_ID_PREFIX.length\n        );\n      } else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n        if (applauseTestCaseId !== undefined) {\n          console.warn('Multiple Applause case ids detected in testCase name');\n        }\n        applauseTestCaseId = token.substring(\n          this.APPLAUSE_CASE_ID_PREFIX.length\n        );\n      }\n    });\n    return {\n      applauseTestCaseId,\n      testRailTestCaseId,\n      testCaseName: tokens\n        .filter(\n          token =>\n            token !==\n            `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`\n        )\n        .filter(\n          token =>\n            token !==\n            `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`\n        )\n        .join(' '),\n    };\n  }\n\n  private mapStatus(result: TestCaseResult): TestResultStatus {\n    switch (result.status) {\n      case 'passed':\n        return TestResultStatus.PASSED;\n      case 'disabled':\n        return TestResultStatus.SKIPPED;\n      case 'failed':\n        return TestResultStatus.FAILED;\n      case 'skipped':\n        return TestResultStatus.SKIPPED;\n      default:\n        throw new Error(\n          'yo, you shouldnt use this for tests that arent in a status auto-api doesnt support'\n        );\n    }\n  }\n}\n\ninterface ParsedTestCaseName {\n  testCaseName: string;\n  testRailTestCaseId?: string;\n  applauseTestCaseId?: string;\n}\n"],"names":["constructor","globalConfig","options","this","Promise","resolve","autoapi","AutoApi","clientConfig","apiKey","baseUrl","productId","testRailOptions","testRail","onRunStart","runnerStart","onRunComplete","runnerEnd","onTestCaseStart","_test","_testCaseStartInfo","startTestResult","fullName","onTestCaseResult","_testCaseResult","console","log","submitTestResult","mapStatus","tests","testRunId","startTestRun","then","response","runId","data","heartbeat","TestRunHeartbeatService","heartbeatStarted","start","id","testCaseName","parsedTestCase","parseTestCaseName","uidToResultIdMap","startTestCase","testCaseId","testRailTestCaseId","providerSessionIds","res","testResultId","status","errorMessage","uidSubmissionMap","resultId","failureReason","end","resultIds","valuePromises","Object","values","all","vals","catch","reason","error","message","resultPromises","endTestRun","jsonArray","getProviderSessionLinks","length","info","JSON","stringify","outputPath","writeFileSync","pathJoin","tokens","split","applauseTestCaseId","forEach","token","startsWith","TEST_RAIL_CASE_ID_PREFIX","undefined","warn","substring","APPLAUSE_CASE_ID_PREFIX","filter","join","result","TestResultStatus","PASSED","SKIPPED","FAILED","Error"],"mappings":"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"}
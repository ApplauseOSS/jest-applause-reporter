{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ApplauseReporter, TestResultStatus, loadConfig, } from 'applause-reporter-common';\nexport default class ApplauseJestReporter {\n    globalConfig;\n    reporter;\n    constructor(globalConfig, options) {\n        this.globalConfig = globalConfig;\n        const config = loadConfig({\n            properties: options,\n        });\n        this.reporter = new ApplauseReporter(config);\n    }\n    onRunStart() {\n        this.reporter.runnerStart();\n    }\n    async onRunComplete() {\n        await this.reporter.runnerEnd();\n    }\n    onTestCaseStart(_test, _testCaseStartInfo) {\n        this.reporter.startTestCase(_testCaseStartInfo.fullName, _testCaseStartInfo.title, {\n            providerSessionIds: globalThis.driverRegistry.getSessionIdsForTestCase(_testCaseStartInfo.fullName),\n        });\n    }\n    onTestCaseResult(_test, _testCaseResult) {\n        this.reporter.submitTestCaseResult(_testCaseResult.fullName, this.mapStatus(_testCaseResult), {\n            failureReason: _testCaseResult.failureMessages.join(', '),\n            providerSessionGuids: globalThis.driverRegistry.getSessionIdsForTestCase(_testCaseResult.fullName),\n        });\n    }\n    mapStatus(result) {\n        switch (result.status) {\n            case 'passed':\n                return TestResultStatus.PASSED;\n            case 'disabled':\n                return TestResultStatus.SKIPPED;\n            case 'failed':\n                return TestResultStatus.FAILED;\n            case 'skipped':\n                return TestResultStatus.SKIPPED;\n            default:\n                throw new Error('yo, you shouldnt use this for tests that arent in a status auto-api doesnt support');\n        }\n    }\n}\n//# sourceMappingURL=index.js.map"],"names":["globalConfig","reporter","constructor","options","this","config","loadConfig","properties","ApplauseReporter","onRunStart","runnerStart","onRunComplete","runnerEnd","onTestCaseStart","_test","_testCaseStartInfo","startTestCase","fullName","title","providerSessionIds","globalThis","driverRegistry","getSessionIdsForTestCase","onTestCaseResult","_testCaseResult","submitTestCaseResult","mapStatus","failureReason","failureMessages","join","providerSessionGuids","result","status","TestResultStatus","PASSED","SKIPPED","FAILED","Error"],"mappings":"0VACe,MACXA,aACAC,SACA,WAAAC,CAAYF,EAAcG,GACtBC,KAAKJ,aAAeA,EACpB,MAAMK,EAASC,EAAAA,WAAW,CACtBC,WAAYJ,IAEhBC,KAAKH,SAAW,IAAIO,EAAgBA,iBAACH,EACxC,CACD,UAAAI,GACIL,KAAKH,SAASS,aACjB,CACD,mBAAMC,SACIP,KAAKH,SAASW,WACvB,CACD,eAAAC,CAAgBC,EAAOC,GACnBX,KAAKH,SAASe,cAAcD,EAAmBE,SAAUF,EAAmBG,MAAO,CAC/EC,mBAAoBC,WAAWC,eAAeC,yBAAyBP,EAAmBE,WAEjG,CACD,gBAAAM,CAAiBT,EAAOU,GACpBpB,KAAKH,SAASwB,qBAAqBD,EAAgBP,SAAUb,KAAKsB,UAAUF,GAAkB,CAC1FG,cAAeH,EAAgBI,gBAAgBC,KAAK,MACpDC,qBAAsBV,WAAWC,eAAeC,yBAAyBE,EAAgBP,WAEhG,CACD,SAAAS,CAAUK,GACN,OAAQA,EAAOC,QACX,IAAK,SACD,OAAOC,EAAAA,iBAAiBC,OAC5B,IAAK,WAIL,IAAK,UACD,OAAOD,EAAAA,iBAAiBE,QAH5B,IAAK,SACD,OAAOF,EAAAA,iBAAiBG,OAG5B,QACI,MAAM,IAAIC,MAAM,sFAE3B"}
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("auto-api-client-js"),require("fs"),require("path")):"function"==typeof define&&define.amd?define(["auto-api-client-js","fs","path"],e):(t="undefined"!=typeof globalThis?globalThis:t||self)["jest-applause-reporter"]=e(t.autoApiClientJs,t.fs,t.path)}(this,(function(t,e,s){"use strict";return class{constructor(e,s){this.globalConfig=e,this.TEST_RAIL_CASE_ID_PREFIX="TestRail-",this.APPLAUSE_CASE_ID_PREFIX="Applause-",this.testRunId=Promise.resolve(0),this.uidToResultIdMap={},this.uidSubmissionMap={},this.autoapi=new t.AutoApi({clientConfig:{apiKey:s.apiKey,baseUrl:s.baseUrl},productId:s.productId,testRailOptions:s.testRail})}onRunStart(){this.runnerStart([])}onRunComplete(){this.runnerEnd()}onTestCaseStart(t,e){this.startTestResult(e.fullName,e.fullName)}onTestCaseResult(t,e){console.log("Test Case Result"),this.submitTestResult(e.fullName,this.mapStatus(e))}runnerStart(e){this.testRunId=this.autoapi.startTestRun({tests:e}).then((e=>{const s=e.data.runId;return console.log("Test Run %d initialized",s),this.heartbeat=new t.TestRunHeartbeatService(s,this.autoapi),this.heartbeatStarted=this.heartbeat.start(),s}))}startTestResult(t,e){const s=this.parseTestCaseName(e);this.uidToResultIdMap[t]=this.testRunId?.then((t=>this.autoapi.startTestCase({testCaseName:s.testCaseName,testCaseId:s.testRailTestCaseId,testRunId:t,providerSessionIds:[]}))).then((t=>t.data.testResultId))}submitTestResult(t,e,s){this.uidSubmissionMap[t]=this.uidToResultIdMap[t]?.then((t=>this.autoapi.submitTestResult({status:e,testResultId:t,failureReason:s})))}async runnerEnd(){await this.testRunId,await this.heartbeatStarted,await(this.heartbeat?.end());let t=[];const a=Object.values(this.uidToResultIdMap);await Promise.all(a).then((e=>t=null==e?[]:e)).catch((t=>{console.error(`Unable to retrieve Applause TestResultIds ${t.message}`)}));const i=Object.values(this.uidSubmissionMap);await Promise.all(i),await this.autoapi.endTestRun(await this.testRunId||0);const n=(await this.autoapi.getProviderSessionLinks(t)).data||[];if(n.length>0){console.info(JSON.stringify(n));const t=".";e.writeFileSync(s.join(t,"providerUrls.txt"),JSON.stringify(n,null,1))}}parseTestCaseName(t){const e=t.split(" ");let s,a;return e.forEach((t=>{t?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)?(void 0!==s&&console.warn("Multiple TestRail case ids detected in testCase name"),s=t.substring(this.TEST_RAIL_CASE_ID_PREFIX.length)):t?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)&&(void 0!==a&&console.warn("Multiple Applause case ids detected in testCase name"),a=t.substring(this.APPLAUSE_CASE_ID_PREFIX.length))})),{applauseTestCaseId:a,testRailTestCaseId:s,testCaseName:e.filter((t=>t!==`${this.TEST_RAIL_CASE_ID_PREFIX}${s||""}`)).filter((t=>t!==`${this.APPLAUSE_CASE_ID_PREFIX}${a||""}`)).join(" ")}}mapStatus(e){switch(e.status){case"passed":return t.TestResultStatus.PASSED;case"disabled":case"skipped":return t.TestResultStatus.SKIPPED;case"failed":return t.TestResultStatus.FAILED;default:throw new Error("yo, you shouldnt use this for tests that arent in a status auto-api doesnt support")}}}}));
//# sourceMappingURL=index.min.js.map

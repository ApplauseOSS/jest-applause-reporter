{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { Reporter, TestCaseResult } from '@jest/reporters';\nimport { Test } from '@jest/test-result';\nimport { Circus } from '@jest/types';\nimport { Config } from 'jest';\nimport { ApplauseOptions } from './applause-options';\nimport {\n  AutoApi,\n  TestResultStatus,\n  TestRunHeartbeatService,\n} from 'auto-api-client-js';\nimport { writeFileSync } from 'fs';\nimport { join as pathJoin } from 'path';\n\nexport default class ApplauseReporter implements Reporter {\n  private readonly TEST_RAIL_CASE_ID_PREFIX: string = 'TestRail-';\n  private readonly APPLAUSE_CASE_ID_PREFIX: string = 'Applause-';\n\n  private autoapi: AutoApi;\n  private testRunId: Promise<number> = Promise.resolve(0);\n  private heartbeat?: TestRunHeartbeatService;\n  private heartbeatStarted?: Promise<void>;\n  private uidToResultIdMap: Record<string, Promise<number>> = {};\n  private uidSubmissionMap: Record<string, Promise<void>> = {};\n\n  constructor(public globalConfig: Config, options: ApplauseOptions) {\n    this.autoapi = new AutoApi({\n      clientConfig: { apiKey: options.apiKey, baseUrl: options.baseUrl },\n      productId: options.productId,\n      testRailOptions: options.testRail,\n    });\n  }\n\n  onRunStart(): void {\n    void this.runnerStart([]);\n  }\n\n  onRunComplete(): void {\n    void this.runnerEnd();\n  }\n\n  onTestCaseStart(\n    _test: Test,\n    _testCaseStartInfo: Circus.TestCaseStartInfo\n  ): void {\n    void this.startTestResult(\n      _testCaseStartInfo.fullName,\n      _testCaseStartInfo.fullName\n    );\n  }\n\n  onTestCaseResult(_test: Test, _testCaseResult: TestCaseResult): void {\n    console.log('Test Case Result');\n    void this.submitTestResult(\n      _testCaseResult.fullName,\n      this.mapStatus(_testCaseResult)\n    );\n  }\n\n  private runnerStart(tests: string[]): void {\n    this.testRunId = this.autoapi\n      .startTestRun({\n        tests,\n      })\n      .then(response => {\n        const runId = response.data.runId;\n        console.log('Test Run %d initialized', runId);\n        this.heartbeat = new TestRunHeartbeatService(runId, this.autoapi);\n        this.heartbeatStarted = this.heartbeat.start();\n        return runId;\n      });\n  }\n\n  private startTestResult(id: string, testCaseName: string): void {\n    const parsedTestCase = this.parseTestCaseName(testCaseName);\n    this.uidToResultIdMap[id] = this.testRunId\n      ?.then(runId =>\n        this.autoapi.startTestCase({\n          testCaseName: parsedTestCase.testCaseName,\n          testCaseId: parsedTestCase.testRailTestCaseId,\n          testRunId: runId,\n          providerSessionIds: [],\n        })\n      )\n      .then(res => {\n        return res.data.testResultId;\n      });\n  }\n\n  private submitTestResult(\n    id: string,\n    status: TestResultStatus,\n    errorMessage?: string\n  ): void {\n    this.uidSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId =>\n      this.autoapi.submitTestResult({\n        status: status,\n        testResultId: resultId,\n        failureReason: errorMessage,\n      })\n    );\n  }\n\n  private async runnerEnd(): Promise<void> {\n    // Wait for the test run to be created and the heartbeat to be started\n    await this.testRunId;\n    await this.heartbeatStarted;\n    // End the heartbeat\n    await this.heartbeat?.end();\n    let resultIds: number[] = [];\n    const valuePromises: Promise<number>[] = Object.values(\n      this.uidToResultIdMap\n    );\n\n    // Wait for all results to be created\n    void (await Promise.all(valuePromises)\n      .then(vals => (resultIds = vals == null ? [] : vals))\n      .catch((reason: Error) => {\n        console.error(\n          `Unable to retrieve Applause TestResultIds ${reason.message}`\n        );\n      }));\n    const resultPromises: Promise<void>[] = Object.values(\n      this.uidSubmissionMap\n    );\n\n    // Wait for the results to be submitted\n    void (await Promise.all(resultPromises));\n\n    // Finally, end the test run\n    await this.autoapi.endTestRun((await this.testRunId) || 0);\n\n    // Fetch the provider session asset links\n    const resp = await this.autoapi.getProviderSessionLinks(resultIds);\n    const jsonArray = resp.data || [];\n    if (jsonArray.length > 0) {\n      console.info(JSON.stringify(jsonArray));\n      // this is the wdio.conf outputDir\n      const outputPath = '.';\n      writeFileSync(\n        pathJoin(outputPath, 'providerUrls.txt'),\n        JSON.stringify(jsonArray, null, 1)\n      );\n    }\n  }\n\n  private parseTestCaseName(testCaseName: string): ParsedTestCaseName {\n    // Split the name on spaces. We will reassemble after parsing out the other ids\n    const tokens = testCaseName.split(' ');\n    let testRailTestCaseId: string | undefined;\n    let applauseTestCaseId: string | undefined;\n    tokens.forEach(token => {\n      if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n        if (testRailTestCaseId !== undefined) {\n          console.warn('Multiple TestRail case ids detected in testCase name');\n        }\n        testRailTestCaseId = token.substring(\n          this.TEST_RAIL_CASE_ID_PREFIX.length\n        );\n      } else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n        if (applauseTestCaseId !== undefined) {\n          console.warn('Multiple Applause case ids detected in testCase name');\n        }\n        applauseTestCaseId = token.substring(\n          this.APPLAUSE_CASE_ID_PREFIX.length\n        );\n      }\n    });\n    return {\n      applauseTestCaseId,\n      testRailTestCaseId,\n      testCaseName: tokens\n        .filter(\n          token =>\n            token !==\n            `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`\n        )\n        .filter(\n          token =>\n            token !==\n            `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`\n        )\n        .join(' '),\n    };\n  }\n\n  private mapStatus(result: TestCaseResult): TestResultStatus {\n    switch (result.status) {\n      case 'passed':\n        return TestResultStatus.PASSED;\n      case 'disabled':\n        return TestResultStatus.SKIPPED;\n      case 'failed':\n        return TestResultStatus.FAILED;\n      case 'skipped':\n        return TestResultStatus.SKIPPED;\n      default:\n        throw new Error(\n          'yo, you shouldnt use this for tests that arent in a status auto-api doesnt support'\n        );\n    }\n  }\n}\n\ninterface ParsedTestCaseName {\n  testCaseName: string;\n  testRailTestCaseId?: string;\n  applauseTestCaseId?: string;\n}\n"],"names":["pathJoin"],"mappings":"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"}